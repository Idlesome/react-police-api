{"version":3,"sources":["components/CrimeCard.js","components/Marker.js","components/Map.js","containers/MapContainer.js","MapControls.js","App.js","serviceWorker.js","index.js"],"names":["CrimeCard","props","crime","react_default","a","createElement","Item","Content","Header","location","street","name","Meta","category","outcome_status","Fragment","date","Marker","state","isOpen","activeMarker","_this","toggleOpen","setState","closeMarkers","pid","nextProps","this","showMarker","lib","onClick","position","maxWidth","defaultPosition","onCloseClick","onToggleOpen","components_CrimeCard","toggleShowPage","React","Component","Map","withScriptjs","withGoogleMap","markers","crimes","map","Marker_Marker","activeCrimeCategory","key","persistent_id","closeOtherMarkers","lat","parseFloat","latitude","lng","longitude","defaultZoom","center","MapContainer","uid","components_Map","googleMapURL","loadingElement","style","height","containerElement","width","float","mapElement","onChange","e","_ref","value","setCategory","Dropdown","placeholder","fluid","selection","options","crimeCategories","loading","length","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setActiveCrimeCategory","year","month","error","_this2","axios","get","then","result","data","catch","text","url","MapContainer_MapContainer","MapControls_MapContainer","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0876cf2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Item, Button } from \"semantic-ui-react\";\n\nconst CrimeCard = (props) => {\n\n\tconst { crime } = props;\n\n\tconst handleClick = (e) => {\n\t\tprops.toggleShowPage(crime)\n\t\tconsole.log(crime);\n\t}\n\n\treturn (\n\t\t<Item>\n\t\t\t<Item.Content>\n\t\t\t\t<Item.Header >\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t{crime.location.street.name}\n\t\t\t\t\t</strong>\n\t\t\t\t</Item.Header>\n\t\t\t\t<Item.Meta>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<b>Category: {crime.category}\n\t\t\t\t\t\t</b>\n\t\t\t\t\t\t{crime.outcome_status &&\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\tOutcome {crime.outcome_status.date}: {crime.outcome_status.category}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t</span>\n\t\t\t\t</Item.Meta>\n\n\t\t\t</Item.Content>\n\t\t</Item>\n\t\t);\n}\n\nexport default CrimeCard;","import React from \"react\";\nimport { Marker as MapMarker, InfoWindow } from \"react-google-maps\";\nimport CrimeCard from \"./CrimeCard\";\n\nexport default class Marker extends React.Component {\n\n  state = {\n    isOpen: false,\n    activeMarker: this.props.activeMarker\n  }\n\n  toggleOpen = () => {\n    this.setState({isOpen: !this.state.isOpen}, () =>{\n        if (!this.state.isOpen){\n          this.setState({activeMarker: false}, () => {\n            this.props.closeMarkers(null)\n          })\n        } else{\n          this.props.closeMarkers(this.props.pid)\n        }\n      }\n    )\n  }\n\n  componentWillReceiveProps(nextProps){\n    this.setState({activeMarker: nextProps.activeMarker})\n  }\n\n  render(){\n  \tif(!this.props.showMarker) {\n  \t\treturn null;\n  \t}\n\n    return(\n    \t<>\n\t        <MapMarker\n\t        \tonClick={this.toggleOpen}\n\t          position={this.props.location}\n\t        >\n\t        </MapMarker>\n\t        { this.state.isOpen && this.state.activeMarker ?\n\t          <InfoWindow maxWidth={800} defaultPosition={ this.props.location } onCloseClick={this.props.onToggleOpen}>\n\t            <CrimeCard toggleShowPage={this.props.toggleShowPage} crime={this.props.crime}/>\n\t          </InfoWindow> : null\n\t        }\n        </>\n    );\n  }\n}","import React from \"react\";\nimport { withScriptjs, withGoogleMap, GoogleMap } from \"react-google-maps\";\nimport Marker from \"./Marker\";\n\nconst Map = withScriptjs(withGoogleMap((props) =>{\n\n  const markers = props.crimes.map( crime => {\n      return (<Marker\n        showMarker={props.activeCrimeCategory === \"all-crime\" || crime.category === props.activeCrimeCategory}\n        key={crime.persistent_id}\n        pid={crime.persistent_id}\n        closeMarkers={props.closeOtherMarkers}\n        toggleShowPage={props.toggleShowPage}\n        location={{ lat: parseFloat(crime.location.latitude), lng: parseFloat(crime.location.longitude)  }}\n        crime={crime}\n        activeMarker={crime.persistent_id === props.activeMarker ? true : false}\n      />);\n  });\n                  \n  return (\n      <GoogleMap\n        defaultZoom={14}\n        center={ { lat:  51.400459, lng: -1.321850 } }\n        >\n        {markers}\n      </GoogleMap>\n    );\n  }\n))\n\nexport default Map;\n\n\n\n\n\n\n\n","import React from \"react\";\nimport Map from \"../components/Map\";\n\nexport default class MapContainer extends React.Component {\n\n\tstate = {\n\t\tactiveMarker: null\n\t}\n\n\tcloseOtherMarkers = (uid) => {\n\t\tthis.setState({activeMarker: uid})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Map\n\t\t\t\tcrimes={this.props.crimes}\n\t\t\t\tgoogleMapURL={`https://maps.googleapis.com/maps/api/js?key=AIzaSyA-jbFCGQf6y9kL6s9wLkr3gVCRYV6hJjw&v=3.exp&libraries=geometry,drawing,places`}\n\t\t\t\tloadingElement={<div style={{ height: `100%` }} />}\n\t\t\t\tcontainerElement={<div style={{ height: `600px`, width: `50%`, float: `left` }} />}\n\t\t\t\tmapElement={<div style={{ height: `100%` }} />}\n\t\t\t\tactiveMarker={this.state.activeMarker}\n\t\t\t\tcloseOtherMarkers={this.closeOtherMarkers}\n\t\t\t\tactiveCrimeCategory={this.props.activeCrimeCategory}\n\t\t\t/>\n\t\t);\n\t}\n}","import React from \"react\";\nimport { Dropdown } from 'semantic-ui-react'\n\nexport default class MapContainer extends React.Component {\n\n\tstate = {\n\t\tactiveCrimeCategory: this.props.activeCrimeCategory\n\t}\n\n\tonChange = (e, { value }) => {\n\t\tthis.props.setCategory(value);\n\t\t//this.setState({ activeCrimeCategory: this.props.activeCrimeCategory });\n\t}\n\n\tcomponentWillReceiveProps(nextProps){\n\t    this.setState({activeCrimeCategory: nextProps.activeCrimeCategory})\n\t  }\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{width: `50%`, float: `left`}}>\n\t\t\t\t<Dropdown\n\t\t\t\t\tplaceholder='Filter by crime category'\n\t\t\t\t\tfluid\n\t\t\t\t\tselection\n\t\t\t\t\toptions={this.props.crimeCategories}\n\t\t\t\t\tloading={this.props.crimeCategories.length === 0}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tvalue={this.state.activeCrimeCategory}\n\t\t\t\t>\n\t\t\t\t</Dropdown>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n}","import React, { Component } from 'react';\nimport MapContainer from './containers/MapContainer.js'\nimport MapControls from './MapControls.js'\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      crimes: [],\n      year: \"2018\",\n      month: \"01\",\n      activeCrimeCategory: \"all-crime\",\n      crimeCategories: [],\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    axios.get(\"https://data.police.uk/api/crimes-street/all-crime?lat=51.400459&lng=-1.321850&date=\"+this.state.year+\"-\"+this.state.month)\n      .then(result => {\n        this.setState({\n          crimes: result.data,\n        });\n        //console.log(result.data);\n      })\n      .catch(error => this.setState({error}));\n\n    axios.get(\"https://data.police.uk/api/crime-categories?date=\"+this.state.year+\"-\"+this.state.month)\n      .then(result => {\n        this.setState({\n          crimeCategories: result.data.map(category => {\n            return {key: category.name, text: category.name, value: category.url}\n          }),\n        });\n        //console.log(result.data);\n      })\n      .catch(error => this.setState({error}));\n  }\n\n  setActiveCrimeCategory = (activeCrimeCategory) => {\n    this.setState({activeCrimeCategory});\n\n  }\n\n  render() {\n    if(this.state.error){\n      return (\n        <div>{this.state.error}</div>\n        );\n    }\n\n    return (\n      <>\n        <MapContainer\n          crimes={this.state.crimes}\n          activeCrimeCategory={this.state.activeCrimeCategory}\n        />\n        <MapControls\n          activeCrimeCategory={this.state.activeCrimeCategory}\n          setCategory={this.setActiveCrimeCategory}\n          crimeCategories={this.state.crimeCategories}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}